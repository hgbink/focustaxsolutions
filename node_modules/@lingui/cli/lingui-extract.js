"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray2 = require("babel-runtime/helpers/slicedToArray");

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

exports.default = command;

var _fs = require("fs");

var _fs2 = _interopRequireDefault(_fs);

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _mkdirp = require("mkdirp");

var _mkdirp2 = _interopRequireDefault(_mkdirp);

var _chalk = require("chalk");

var _chalk2 = _interopRequireDefault(_chalk);

var _commander = require("commander");

var _commander2 = _interopRequireDefault(_commander);

var _conf = require("@lingui/conf");

var _extract = require("./api/extract");

var _stats = require("./api/stats");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function command(config, format, options) {
  var convertFormat = options.prevFormat || format;
  var locales = convertFormat.getLocales();

  if (!locales.length) {
    console.log("No locales defined!\n");
    console.log("(use \"" + _chalk2.default.yellow("lingui add-locale <language>") + "\" to add one)");
    return false;
  }

  var buildDir = _path2.default.join(config.localeDir, "_build");
  if (!_fs2.default.existsSync(buildDir)) {
    (0, _mkdirp2.default)(buildDir);
  }

  console.log("Extracting messages from source files…");
  (0, _extract.extract)(config.srcPathDirs, config.localeDir, {
    ignore: config.srcPathIgnorePatterns,
    verbose: options.verbose
  });
  options.verbose && console.log();

  console.log("Collecting all messages…");
  var clean = options.clean ? _extract.cleanObsolete : function (id) {
    return id;
  };
  var catalog = (0, _extract.collect)(buildDir);
  var catalogs = clean(convertFormat.merge(catalog));
  options.verbose && console.log();

  console.log("Writing message catalogues…");
  locales.map(function (locale) {
    return format.write(locale, catalogs[locale]);
  }).forEach(function (_ref) {
    var _ref2 = (0, _slicedToArray3.default)(_ref, 2),
        created = _ref2[0],
        filename = _ref2[1];

    if (!filename || !options.verbose) return;

    if (created) {
      console.log(_chalk2.default.green("Created " + filename));
    } else {
      console.log(_chalk2.default.green("Updated " + filename));
    }
  });
  options.verbose && console.log();

  console.log("Messages extracted!\n");

  console.log("Catalog statistics:");
  (0, _stats.printStats)(config, catalogs);
  console.log();

  console.log("(use \"" + _chalk2.default.yellow("lingui add-locale <language>") + "\" to add more locales)");
  console.log("(use \"" + _chalk2.default.yellow("lingui extract") + "\" to update catalogs with new messages)");
  console.log("(use \"" + _chalk2.default.yellow("lingui compile") + "\" to compile catalogs for production)");
  return true;
}

if (require.main === module) {
  _commander2.default.option("--clean", "Remove obsolete translations").option("--verbose", "Verbose output").option("--format <format>", "Format of message catalogs").option("--convert-from <format>", "Convert from previous format of message catalogs").parse(process.argv);

  var config = (0, _conf.getConfig)();
  var formatName = _commander2.default.format || config.format;
  var prevFormatName = _commander2.default.convertFrom;

  if (prevFormatName && formatName === prevFormatName) {
    console.log(_chalk2.default.red("Trying to migrate message catalog to the same format"));
    console.log("Set " + _chalk2.default.bold("new") + " format in lingui configuration or using" + (" --format option\nand " + _chalk2.default.bold("previous") + " format using") + " --convert-format option.");
    console.log();
    console.log("Example: Convert from lingui format to minimal");
    console.log(_chalk2.default.yellow("lingui extract --format minimal --convert-from lingui"));
    process.exit(1);
  }

  var format = require("./api/formats/" + formatName).default(config);
  var _prevFormat = prevFormatName ? require("./api/formats/" + prevFormatName).default(config) : null;

  var result = command(config, format, {
    verbose: _commander2.default.verbose || false,
    clean: _commander2.default.clean || false,
    prevFormat: _prevFormat
  });

  if (!result) process.exit(1);
}